{"version":3,"sources":["state/index.jsx","state/actions.js","components/ComicResult/index.jsx","components/SearchResults/index.jsx","components/SearchQuery/index.jsx","views/SearchView/index.jsx","components/ComicDetail/index.jsx","views/DetailView/index.jsx","components/HeaderBar/index.jsx","App.js","serviceWorker.js","state/reducer.js","index.js"],"names":["StateContext","createContext","useStateValue","useContext","apikey","url","receiveResults","results","type","setQueryParams","paramTypes","params","Object","keys","forEach","title","issueNumber","thumbnail","onClick","Item","className","as","Image","size","src","path","extension","Content","Header","Meta","Button","floated","SearchResults","query","dispatch","handleClick","id","requestComic","axios","then","res","comic","data","fetchComic","isFetching","Loader","inverted","active","length","Message","Group","map","result","ComicResult","key","SearchQuery","options","Input","fluid","name","value","onChange","target","updateQuery","icon","Icon","circular","link","fetchResults","placeholder","SearchView","ComicDetail","detail","image","images","Description","description","withBackButton","textAlign","dividing","animated","view","visible","hidden","App","HeaderBar","search","DetailView","Boolean","window","location","hostname","match","initialState","limit","offset","ReactDOM","render","reducer","children","Provider","useReducer","state","action","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a05c97c.chunk.js","sourcesContent":["import React, {createContext, useContext, useReducer} from 'react'\n\nexport const StateContext = createContext()\n\nexport const StateProvider = ({ reducer, initialState, children }) =>(\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\n        {children}\n    </StateContext.Provider>\n)\n\nexport const useStateValue = () => useContext(StateContext)","import axios from 'axios'\n\nconst apikey = 'f761a11067d7e29fb1f5c496a7350db3'\nconst url = 'https://gateway.marvel.com/v1/public/comics'\n\n\nexport const updateQuery = query => {\n    return {\n        type: 'UPDATE_QUERY',\n        query\n    }\n}\n\nexport const updateOptions = options => {\n    return {\n        type: 'UPDATE_OPTIONS',\n        options\n    }\n}\n\nconst requestResults = () => {\n    return {\n        type: 'REQUEST_RESULTS'\n    }\n}\n\nconst receiveResults = results => {\n    return {\n        type: 'RECEIVE_RESULTS',\n        results\n    }\n}\n\nconst setQueryParams = paramTypes => {\n    let params = {}\n    Object.keys(paramTypes).forEach(type => {\n        if (paramTypes[type]) params[type] = paramTypes[type]\n    })\n\n    return params\n}\n\nexport const fetchResults = (dispatch, params, options = {}) => {\n\n    dispatch(requestResults())\n\n    axios({\n        url,\n        params: {\n            apikey,\n            ...setQueryParams(params),\n            ...options\n        }\n    }).then(res => {\n        dispatch(receiveResults(res.data.data))\n    })\n}\n\nconst requestComic = id => {\n    return {\n        type: 'REQUEST_COMIC',\n        id\n    }\n}\n\nconst receiveComic = comic => {\n    return {\n        type: 'RECEIVE_COMIC',\n        comic\n    }\n}\n\nexport const fetchComic = (dispatch, id) => {\n\n    dispatch(requestComic())\n\n    axios({\n        url: `${url}/${id}`,\n        params: {\n            apikey\n        }\n    }).then(res => {\n        dispatch(receiveComic(res.data.data.results[0]))\n    })\n}","import React from 'react'\nimport { Item, Button } from 'semantic-ui-react'\nimport './styles.css'\n\nexport default ({ title, issueNumber, thumbnail, onClick }) => (\n    <Item className='ComicResult' as='a' onClick={onClick}>\n        <Item.Image size='tiny' src={`${thumbnail.path}/standard_medium.${thumbnail.extension}`} />\n\n        <Item.Content>\n            <Item.Header>{title}</Item.Header>\n            {issueNumber > 0 && <Item.Meta>Issue No. {issueNumber}</Item.Meta>}\n        </Item.Content>\n        <Button floated='right'>View Details</Button>\n    </Item>\n)\n","import React from 'react'\nimport { useStateValue } from '../../state'\nimport { fetchComic } from '../../state/actions'\nimport { Loader, Item, Message } from 'semantic-ui-react'\nimport ComicResult from '../ComicResult'\nimport './styles.css'\n\nconst SearchResults = () => {\n\n    const [{ query, results },dispatch] = useStateValue()\n\n    const handleClick = id => fetchComic(dispatch, id)\n\n    return !results.results && !results.isFetching ? null :\n\n        <div className='SearchResults'>\n            {results.isFetching && <Loader inverted active />}\n\n            {results.results.length === 0 &&\n                <Message>\n                    <Message.Header>No Results for '{query.title}'</Message.Header>\n                    <p>Try being more specific. Or just type 'Spider-Man'.</p>\n                </Message>\n            }\n            {results.results.length > 0 &&\n                <Item.Group>\n                    {results.results.map(result => <ComicResult key={result.id} {...result} onClick={()=>handleClick(result.id)} />)}\n                </Item.Group>\n            }\n        </div>\n}\n\nexport default SearchResults\n","import React from 'react'\nimport { useStateValue } from '../../state'\nimport { fetchResults, updateQuery } from '../../state/actions'\nimport { Input, Icon } from 'semantic-ui-react'\n\nimport './styles.css'\n\nconst SearchQuery = () => {\n\n    const [{ query, options, results }, dispatch] = useStateValue();\n\n    const handleQueryChange = ({ target }) => {\n        dispatch(updateQuery({ [target.name]: target.value }))\n    }\n\n    const handleSubmit = () => fetchResults(dispatch, query, options)\n\n    return (\n        <div className={`SearchQuery ${results.results || results.isFetching ? 'with-results' : ''}`}>\n            <Input\n                fluid\n                name='title'\n                value={query.title}\n                size='large'\n                onChange={handleQueryChange}\n                icon={<Icon\n                    name={'search'}\n                    inverted \n                    circular \n                    link\n                    onClick={handleSubmit } \n                    />}\n                placeholder='Search for a comic...'\n            />\n        </div>\n    )\n}\n\nexport default SearchQuery\n","import React from 'react'\nimport SearchResults from '../../components/SearchResults'\nimport SearchQuery from '../../components/SearchQuery'\n\nconst SearchView = () => <>\n    <SearchQuery />\n    <SearchResults />\n</>\n\nexport default SearchView\n","import React from 'react'\nimport { useStateValue } from '../../state'\nimport { Item, Loader } from 'semantic-ui-react'\nimport './styles.css'\n\nconst ComicDetail = () => {\n    const [{ comic }] = useStateValue()\n    const detail = comic.comic\n    let image = detail.images && detail.images.length > 0 ? detail.images[0] : false\n\n    return (\n        <div className='ComicDetail'>\n            {comic.isFetching && <Loader active />}\n            {!comic.isFetching && detail &&\n                <Item.Group>\n                    <Item>\n                        {image && <Item.Image src={`${image.path}/portrait_incredible.${image.extension}`} />}\n                        <Item.Content>\n                            <Item.Header>{detail.title}</Item.Header>\n                            {detail.issueNumber > 0 && <Item.Meta>Issue No. {detail.issueNumber}</Item.Meta>}\n                            <Item.Description>{detail.description}</Item.Description>\n\n                        </Item.Content>\n                    </Item>\n                </Item.Group>}\n        </div>\n    )\n}\n\nexport default ComicDetail\n","import React from 'react'\nimport ComicDetail from '../../components/ComicDetail'\n\nexport default () => <ComicDetail />\n","import React from 'react'\nimport { useStateValue } from '../../state'\nimport { Button, Icon, Header } from 'semantic-ui-react'\n\nimport './styles.css'\n\nexport default ({ withBackButton }) => {\n    const [{ results }, dispatch] = useStateValue()\n\n    const returnToSearch = () => dispatch({\n        type: 'CHANGE_VIEW',\n        view: 'search'\n    })\n\n    return (\n        <Header\n            textAlign='center'\n            className={`HeaderBar ${results.isFetching || results.results ? 'with-results' : ''}`}\n            size='huge'\n            inverted\n            dividing\n            as='div'>\n            {withBackButton &&\n                <Button\n                    className=\"HeaderBar__back_button\"\n                    floated='left'\n                    animated='fade'\n                    inverted\n                    onClick={returnToSearch}>\n                    <Button.Content visible>Back</Button.Content>\n                    <Button.Content hidden><Icon name='arrow left' /></Button.Content>\n                </Button>\n            }\n            <Header.Content className='HeaderBar__content'>Marvel Comics</Header.Content>\n        </Header>\n    )\n}\n","import React from 'react';\nimport {useStateValue} from './state'\nimport SearchView from './views/SearchView'\nimport DetailView from './views/DetailView'\nimport HeaderBar from './components/HeaderBar'\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css'\n\nfunction App() {\n\tconst [{view}] = useStateValue()\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<HeaderBar withBackButton={view === 'comic'} />\n\t\t\t{{\n\t\t\t\tsearch: <SearchView />,\n\t\t\t\tcomic: <DetailView />\n\t\t\t}[view || 'search']}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const initialState = {\n    view: 'search',\n    query: {\n        title: '',\n    },\n    results: {\n        isFetching: false,\n        results: false\n    },\n    options: {\n        limit: 20,\n        offset: 1\n    },\n    comic: {\n        id: false,\n        isFetching: false,\n        comic: false\n    }\n}\n\nexport const reducer = (state,action) => {\n    switch (action.type) {\n        case 'CHANGE_VIEW': {\n            return {\n                ...state,\n                view: action.view\n            }\n        }\n\n        case 'UPDATE_QUERY': {\n            return {\n                ...state,\n                query: {...state.query,...action.query}\n            }\n        }\n\n        case 'UPDATE_OPTIONS': {\n            return {\n                ...state,\n                options: {...state.options,...action.options}\n            }\n        }\n\n        case 'REQUEST_RESULTS': {\n            return {\n                ...state,\n                results: {\n                    results: false,\n                    isFetching: true,\n\n                }\n            }\n        }\n\n        case 'RECEIVE_RESULTS': {\n            return {\n                ...state,\n                results: {\n                    ...state.results,\n                    isFetching: false,\n                    ...action.results\n                }\n            }\n        }\n\n        case 'CLEAR_RESULTS': {\n            return initialState\n        }\n\n        case 'REQUEST_COMIC': {\n            return {\n                ...state,\n                view: 'comic',\n                comic: {\n                    ...state.comic,\n                    id: action.id,\n                    isFetching: true,\n                }\n            }\n        }\n\n        case 'RECEIVE_COMIC': {\n            return {\n                ...state,\n                comic: {\n                    ...state.comic,\n                    isFetching: false,\n                    comic: action.comic\n                }\n            }\n        }\n\n        default:\n            return state\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {StateProvider} from './state'\nimport {initialState,reducer} from './state/reducer'\n\nReactDOM.render(\n    <StateProvider {...{initialState,reducer}}>\n        <App />\n    </StateProvider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}